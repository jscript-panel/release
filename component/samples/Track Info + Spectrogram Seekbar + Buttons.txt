// ==PREPROCESSOR==
// @name "Track Info + Spectrogram Seekbar + Buttons"
// @author "marc2003"
// @import "%fb2k_component_path%helpers.txt"
// @import "%fb2k_component_path%samples\js\lodash.min.js"
// @import "%fb2k_component_path%samples\js\common.js"
// @import "%fb2k_component_path%samples\js\panel.js"
// @import "%fb2k_component_path%samples\js\seekbar.js"
// ==/PREPROCESSOR==

/*
Limitations:
Since the script passes the filename to ffmpeg for decoding and generating the spectrogram
image, your input components are irrelevant.

It only works on local files with a known length and cue sheets/files with chapters are not supported.

There seems to be a maxiumum length limit and during my own testing, a 53m track was fine
but my next longest track at 57m was not. YMMV.

---

You can download ffmpeg from here:

https://www.gyan.dev/ffmpeg/builds/

If you use a special build with libfdk-aac support, images can be generated when files encoded
with exhale are played. See here:

https://hydrogenaud.io/index.php?topic=118888.msg1006624#msg1006624

The script automatically handles the differing command line arguments.

Edit the executable path below if required.

See here for available options which can be set via the right click menu.

https://ffmpeg.org/ffmpeg-filters.html#showspectrumpic

Do not set "legend" as that is already disabled.
*/

var ffmpeg_exe = fb.ProfilePath + 'ffmpeg.exe'; // if you edit this, directory separators must be escaped like "d:\\audio\\tools\\ffmpeg.exe"
var spectrogram_cache = folders.data + 'spectrogram_cache\\'; // if you edit this, you must ensure the folder already exists

var colours = {
	buttons : RGB(255, 255, 255),
	background : RGB(30, 30, 30),
	title : RGB(255, 255, 255),
	artist : RGB(240, 240, 240),
	time : RGB(240, 240, 240),
	sac : RGB(196, 30, 35),
};

var tfo = {
	artist : fb.TitleFormat('%artist%'),
	title : fb.TitleFormat('%title%'),
	playback_time : fb.TitleFormat('[%playback_time%]'),
	length : fb.TitleFormat('$if2(%length%,LIVE)')
};

//////////////////////////////////////////////////////////////

var panel = new _panel();
var seekbar = new _seekbar(0, 0, 0, 0, true);
var buttons = new _buttons();
var img = null;
var bs = _scale(24);
window.MaxHeight = _scale(150);
if (fb.IsPlaying) on_playback_new_track();
else on_item_focus_change();

buttons.update = function () {
	var y = Math.round((panel.h - bs) / 2);
	this.buttons.stop = new _button(panel.w - LM - (bs * 8), y, bs, bs, { char : chars.stop, colour:fb.StopAfterCurrent ? colours.sac : colours.buttons}, null, function () { fb.Stop(); }, 'Stop');
	this.buttons.previous = new _button(panel.w - LM - (bs * 7), y, bs, bs, { char : chars.prev, colour:colours.buttons }, null, function () { fb.Prev(); }, 'Previous');
	this.buttons.play = new _button(panel.w - LM - (bs * 6), y, bs, bs, { char : !fb.IsPlaying || fb.IsPaused ? chars.play : chars.pause, colour:colours.buttons}, null, function () { fb.PlayOrPause(); }, !fb.IsPlaying || fb.IsPaused ? 'Play' : 'Pause');
	this.buttons.next = new _button(panel.w - LM - (bs * 5), y, bs, bs, { char : chars.next, colour:colours.buttons }, null, function () { fb.Next(); }, 'Next');
	this.buttons.console = new _button(panel.w - LM - (bs * 3), y, bs, bs, {char : chars.console, colour:colours.buttons }, null, function () { fb.ShowConsole(); }, 'Console');
	this.buttons.search = new _button(panel.w - LM - (bs * 2), y, bs, bs, { char : chars.search, colour:colours.buttons }, null, function () { fb.RunMainMenuCommand('Library/Search'); }, 'Library Search');
	this.buttons.preferences = new _button(panel.w - LM - bs, y, bs, bs, { char : chars.preferences, colour:colours.buttons}, null, function () { fb.ShowPreferences(); }, 'Preferences');
}

function update_album_art() {
	_dispose(img);
	img = null;
	var metadb = fb.GetNowPlaying();
	if (metadb) {
		img = metadb.GetAlbumArt();
	}
	window.Repaint();
}

function on_item_focus_change() {
	seekbar.item_focus_change();
}

function on_mouse_lbtn_down(x, y) {
	seekbar.lbtn_down(x, y);
}

function on_mouse_lbtn_up(x, y) {
	if (x < panel.h && fb.IsPlaying && img) {
		fb.GetNowPlaying().ShowAlbumArtViewer();
		return;
	}
	if (buttons.lbtn_up(x, y)) {
		return;
	}
	if (seekbar.lbtn_up(x, y)) {
		return;
	}
	fb.RunMainMenuCommand('View/Show now playing in playlist');
}

function on_mouse_leave() {
	buttons.leave();
}

function on_mouse_move(x, y) {
	window.SetCursor(x < panel.h && fb.IsPlaying && img ? IDC_HAND : IDC_ARROW);
	if (buttons.move(x, y)) {
		return;
	}
	seekbar.move(x, y);
}

function on_mouse_rbtn_up(x, y) {
	return panel.rbtn_up(x, y, seekbar);
}

function on_mouse_wheel(s) {
	if (seekbar.wheel(s)) {
		return;
	}
	if (s == 1) {
		fb.VolumeUp();
	} else {
		fb.VolumeDown();
	}
}

function on_paint(gr) {
	gr.FillRectangle(0, 0, panel.w, panel.h, colours.background);
	gr.FillRectangle(seekbar.x, seekbar.y, seekbar.w, seekbar.h, colours.seekbar_background);
	seekbar.paint(gr);
	gr.DrawRectangle(seekbar.x, seekbar.y, seekbar.w, seekbar.h, 1, seekbar.properties.marker_colour.value);
	buttons.paint(gr);

	if (fb.IsPlaying) {
		if (img) {
			_drawImage(gr, img, 0, 0, panel.h, panel.h, image.crop_top);
		}

		gr.WriteText(tfo.title.Eval(), JSON.stringify({Size:_scale(12),Weight:DWRITE_FONT_WEIGHT_BOLD}), colours.title, panel.h + 10, 0, seekbar.x - panel.h - _scale(60), panel.h * 0.6, DWRITE_TEXT_ALIGNMENT_LEADING, DWRITE_PARAGRAPH_ALIGNMENT_CENTER, DWRITE_WORD_WRAPPING_NO_WRAP);
		gr.WriteText(tfo.artist.Eval(), JSON.stringify({Size:_scale(12)}), colours.artist, panel.h + 10, panel.h * 0.3, seekbar.x - panel.h - _scale(60), panel.h * 0.7, DWRITE_TEXT_ALIGNMENT_LEADING, DWRITE_PARAGRAPH_ALIGNMENT_CENTER, DWRITE_WORD_WRAPPING_NO_WRAP);
		gr.WriteText(tfo.playback_time.Eval(), JSON.stringify({Size:_scale(12)}), colours.time, seekbar.x - _scale(51), 0, _scale(45), panel.h, DWRITE_TEXT_ALIGNMENT_TRAILING, DWRITE_PARAGRAPH_ALIGNMENT_CENTER);
		gr.WriteText(tfo.length.Eval(), JSON.stringify({Size:_scale(12)}), colours.time, seekbar.x + seekbar.w + _scale(12), 0, _scale(45), panel.h, DWRITE_TEXT_ALIGNMENT_LEADING, DWRITE_PARAGRAPH_ALIGNMENT_CENTER);
	}
}

function on_playback_dynamic_info_track(type) {
	if (type == 0) window.Repaint();
	else update_album_art();
}

function on_playback_edited() {
	window.Repaint();
}

function on_playback_new_track() {
	update_album_art();
	seekbar.playback_new_track();
}

function on_playback_pause() {
	buttons.update();
	window.Repaint();
}

function on_playback_seek() {
	seekbar.playback_seek();
}

function on_playback_starting() {
	buttons.update();
	window.Repaint();
}

function on_playback_stop(reason) {
	seekbar.playback_stop(reason);
	buttons.update();
	window.Repaint();
}

function on_playback_time() {
	window.RepaintRect(panel.h, 0, seekbar.x - panel.h, panel.h);
}

function on_playlist_stop_after_current_changed() {
	buttons.update();
	window.Repaint();
}

function on_playlist_switch() {
	seekbar.item_focus_change();
}

function on_size() {
	panel.size();
	seekbar.x = _scale(300);
	seekbar.y = _scale(10);
	seekbar.w = panel.w - seekbar.x - _scale(280);
	seekbar.h = panel.h - (seekbar.y * 2);
	buttons.update();
}
