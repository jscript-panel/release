// ==PREPROCESSOR==
// @name "SimpleThemedButton + Tooltip"
// @author "T.P Wang / marc2003"
// @import "%fb2k_component_path%helpers.txt"
// ==/PREPROCESSOR==

function SimpleButton(x, y, w, h, text, tooltip_text, fonClick, state) {
	this.state = state ? state : ButtonStates.normal;
	this.x = x;
	this.y = y;
	this.w = w;
	this.h = h;
	this.text = text;
	this.tooltip_text = tooltip_text;
	this.fonClick = fonClick;

	this.containXY = function (x, y) {
		return (this.x <= x) && (x <= this.x + this.w) && (this.y <= y) && (y <= this.y + this.h);
	}

	this.changeState = function (state) {
		var old = this.state;
		this.state = state;
		return old;
	}

	this.draw = function (gr) {
		if (this.state == ButtonStates.hide) return;

		switch (this.state) {
		case ButtonStates.normal:
			g_theme.SetPartAndStateId(1, 1);
			break;

		case ButtonStates.hover:
			g_theme.SetPartAndStateId(1, 2);
			break;

		case ButtonStates.down:
			g_theme.SetPartAndStateId(1, 3);
			break;

		case ButtonStates.hide:
			return;
		}

		g_theme.DrawThemeBackground(gr, this.x, this.y, this.w, this.h);
		gr.WriteText(this.text, g_font, g_theme.GetThemeColour(TMT_TEXTCOLOR), this.x, this.y, this.w, this.h, DWRITE_TEXT_ALIGNMENT_CENTER, DWRITE_PARAGRAPH_ALIGNMENT_CENTER);
	}

	this.onClick = function () {
		this.fonClick && this.fonClick();
	}
}

function drawAllButtons(gr) {
	for (var i in buttons) {
		buttons[i].draw(gr);
	}
}

function chooseButton(x, y) {
	for (var i in buttons) {
		if (buttons[i].containXY(x, y) && buttons[i].state != ButtonStates.hide) {
			if (g_tooltip.Text != buttons[i].tooltip_text) { // ensure text has changed otherwise it will flicker
				g_tooltip.Text = buttons[i].tooltip_text;
				g_tooltip.Activate();
			}
			return buttons[i];
		}
	}

	g_tooltip.Text = '';
	return null;
}

function on_paint(gr) {
	gr.FillRectangle(0, 0, window.Width, window.Height, utils.GetSysColour(15));
	drawAllButtons(gr);
}

function on_mouse_move(x, y) {
	var old = cur_btn;
	cur_btn = chooseButton(x, y);

	if (old == cur_btn) {
		if (g_down) return;
	} else if (g_down && cur_btn && cur_btn.state != ButtonStates.down) {
		cur_btn.changeState(ButtonStates.down);
		window.Repaint();
		return;
	}

	old && old.changeState(ButtonStates.normal);
	cur_btn && cur_btn.changeState(ButtonStates.hover);
	window.Repaint();
}

function on_mouse_leave() {
	g_down = false;

	if (cur_btn) {
		cur_btn.changeState(ButtonStates.normal);
		window.Repaint();
	}
}

function on_mouse_lbtn_down(x, y) {
	g_down = true;

	if (cur_btn) {
		cur_btn.changeState(ButtonStates.down);
		window.Repaint();
	}
}

function on_mouse_lbtn_up(x, y) {
	g_down = false;

	if (cur_btn) {
		cur_btn.onClick();
		cur_btn.changeState(ButtonStates.hover);
		window.Repaint();
	}
}

var cur_btn = null;

// Do not create more than one tooltip in one panel
var g_tooltip = window.CreateTooltip();

var g_theme = window.CreateThemeManager('BUTTON');
var g_font = JSON.stringify({Size:12});
var g_down = false;
var TMT_TEXTCOLOR = 3803;

var ButtonStates = {
	normal: 0,
	hover: 1,
	down: 2,
	hide: 3
}

var buttons = {
	Console: new SimpleButton(5, 5, 80, 26, 'Console', 'Click to open the foobar2000 Console', function () {
		fb.ShowConsole();
	}),
	Configure: new SimpleButton(5, 40, 80, 26, 'Configure', 'Click to open the Configuration Window', function () {
		window.ShowConfigure();
	})
};
